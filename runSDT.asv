%%
out = fourParamModel([2,5,0.5,0]);
figure; bar(out); title('Actual Data');
xticks(1:6)
xticklabels({'Hit-exp','FA-exp','Hit-optoIC','FA-optoIC','Hit-optoMGB','FA-MGB'})
y = [0.9, 0.1, 0.9, 0.9,0.6, 0.4]; 

e = myerror([0.5,1,0,0],y);

%%
fun = @(x)(myerror(x,y));
% out = fmincon(fun, [1,1,0,0],...
%     [],[],[],[],...
%     [1e-06,1e-06,-100,-100],[100 100 100 100]); % this fits the data from the above block

out=lsqnonlin(fun,[0.5,1,0,0]);
%%

predBehav = fourParamModel(out);
figure; bar(predBehav); title('Predicted Behavior');
xticks(1:6)
xticklabels({'Hit-exp','FA-exp','Hit-optoIC','FA-optoIC','Hit-optoMGB','FA-MGB'})

%%

function e = myerror(x,y)
    e = sum((y-fourParamModel(x)).^2);
end 


function out= fourParamModel(x)
ICvar = x(1);
MGBgain =  x(2);
cri = x(3);
cri_opto = x(4);

IC = buildDistribution(1, ICvar, 0, ICvar);
% assumes the difference between the MGB and IC is increased gain, decreased variance
MGB = buildDistribution(1, ICvar/MGBgain, 0, ICvar/MGBgain);

%optimalCriterion = (mean(IC.target) + mean(IC.foil))/2; 

expert = applyCriteria(MGB,cri);
opto_IC = applyCriteria(IC,cri_opto);
opto_MGB = applyCriteria(IC,cri); 



out = [expert.hit, expert.fa, opto_IC.hit, opto_IC.fa, opto_MGB.hit, opto_MGB.fa];
end 

